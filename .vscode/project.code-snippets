{
	// Place your node-red-instance-control workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"cspell_ignore_wors_py": {
		"scope": "python",
		"prefix": "cspell_ignore_word",
		"body": [
			"# cspell:ignore $1"
		],
		"description": "Ignore word in cspell"
	},
	"cspell_ignore_wors_md": {
		"scope": "markdown",
		"prefix": "cspell_ignore_word",
		"body": [
			"<!-- cspell:ignore $1 -->"
		],
		"description": "Ignore word in cspell"
	},
	"loadLng_language":{
		"scope": "python",
		"prefix": "loadLng load language",
		"body": [
			"from .lng.default import * ",
			"from libs.JBLibs.helper import loadLng",
			"loadLng()"
		],
		"description": "Load language string"
	},
	"setLng_language":{
		"scope": "python",
		"prefix": "setLng language",
		"body": [
			"from libs.JBLibs.helper import setLng",
			"setLng($language_etc_cs_CZ)"
		],
		"description": "Load language string, etc cs-CZ by file name"
	}
}